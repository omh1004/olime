<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
  namespace = "인터페이스의 패키지 및 이름"과 일치해야 한다.
 -->
<mapper namespace="com.lime.dao.ItemReplyDao">

  <!--  테이블의 컬럼과 객체 필드를 연결한다. -->
  <resultMap type="ItemReply" id="ItemReplyMap">
    <id column="trans_rpy_id" property="replyId"/>
    <result column="item_id" property="itemId"/>
    <result column="user_id" property="userId"/>
    <result column="name" property="userName"/>
    <result column="content" property="content"/>
    <result column="rgt_date" property="rgtDate"/>
    <result column="mdfy_date" property="mdfyDate"/>
    <association property="writer" javaType="User">
      <id column="user_id" property="userId"/>
      <result column="name" property="name"/>
    </association>
    
  </resultMap>
  

  <!-- 
    id => 인터페이스의 메서드 이름과 일치해야 한다.
   -->
   
  <select id="find" resultMap="ItemReplyMap" parameterType="int">
    select
      tr.trans_rpy_id,
      tr.item_id,
      tr.user_id,
      u.name,
      tr.content,
      tr.rgt_date,
      tr.mdfy_date
    from trans_rpy tr
    left join user u
      on tr.user_id = u.user_id
    where tr.item_id = #{itemId}
  </select>
  
  <insert id="insert" parameterType="ItemReply">
    insert into trans_rpy(user_id,item_id,content)
    values(#{writer.userId}, #{itemId}, #{content})
  </insert>
  
  <update id="update" parameterType="ItemReply">
    update trans_rpy set 
      content=#{content}
    where 
      user_id=#{writer.userId} and trans_rpy_id=#{replyId}
  </update>
  
  <delete id="delete" parameterType="ItemReply">
    delete from trans_rpy
    where trans_rpy_id=#{replyId} and user_id=#{writer.userId}
  </delete>
  
</mapper>